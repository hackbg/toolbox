import{_ as s,c as a,o as n,d as e}from"./app.47cc4d7f.js";const C=JSON.parse('{"title":"@hackbg/dock","description":"","frontmatter":{},"headers":[{"level":2,"title":"Overview","slug":"overview"},{"level":3,"title":"Engine","slug":"engine"},{"level":3,"title":"Image","slug":"image"},{"level":3,"title":"Container","slug":"container"},{"level":2,"title":"Example","slug":"example"}],"relativePath":"dock/README.md"}'),o={name:"dock/README.md"},l=e(`<h1 id="hackbg-dock" tabindex="-1">@hackbg/dock <a class="header-anchor" href="#hackbg-dock" aria-hidden="true">#</a></h1><p>Want to run some operation from Node in a reproducible environment? Here&#39;s a really simple way to achieve that with containers.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-hidden="true">#</a></h2><p>This library builds upon <a href="https://www.npmjs.com/package/dockerode" target="_blank" rel="noreferrer">Dockerode</a>, and provides the <code>Engine</code>, <code>Image</code> and <code>Container</code> abstractions.</p><p>These classes are designed to make it easy and performant to run operations in reproducible environments (such as a build container).</p><h3 id="engine" tabindex="-1">Engine <a class="header-anchor" href="#engine" aria-hidden="true">#</a></h3><p>The <code>Engine</code> class connects to the Docker runtime at <code>/var/run/docker.sock</code> or the path specified by the <code>DOCKER_HOST</code> environment variable.</p><h3 id="image" tabindex="-1">Image <a class="header-anchor" href="#image" aria-hidden="true">#</a></h3><p>The <code>Image</code> class supports specifying both an upstream tag to pull from Docker Hub, and/or a local fallback Dockerfile. This allows for fast iteration when constructing the Dockerized runtime environment.</p><h3 id="container" tabindex="-1">Container <a class="header-anchor" href="#container" aria-hidden="true">#</a></h3><p>From an <code>Image</code> instance, you can launch multiple <code>Container</code>s. If you like, you can run multiple parallel operations in identical contexts (as specified by a single local <code>Dockerfile</code>), and the <code>Image</code> will build itself locally, only once and without touching Docker Hub.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-hidden="true">#</a></h2><div class="language-typescript"><button class="copy"></button><span class="lang">typescript</span><pre><code><span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> Docker </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@hackbg/dock</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// By default connects to /var/run/docker.sock</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> engine </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> Docker</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Engine</span><span style="color:#A6ACCD;">(</span><span style="color:#676E95;">/* or pass another socket address here */</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// Specify the image</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> image </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> engine</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">image</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-org/my-build-image:v1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// This image will be pulled</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/path/to/my/Dockerfile</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;">// If the pull fails, build from this Dockerfile</span></span>
<span class="line"><span style="color:#A6ACCD;">  [] </span><span style="color:#676E95;">// Any local paths referenced from the Dockerfile should be added here</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// Run the container</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> container </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">await</span><span style="color:#A6ACCD;"> image</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">build_</span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">+new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#F07178;">readonly</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">/my/project/sources</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/src</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// -v ro</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#F07178;">writable</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">/my/project/artifacts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/dist</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// -v rw</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#F07178;">mapped</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">80</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8080</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">                          </span><span style="color:#676E95;">// -p container:host</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><div align="center"><hr><p>Made with <strong>#%&amp;!</strong> @ <a href="https://foss.hack.bg" target="_blank" rel="noreferrer"><strong>Hack.bg</strong></a></p></div>`,14),p=[l];function r(t,c,i,D,y,d){return n(),a("div",null,p)}const A=s(o,[["render",r]]);export{C as __pageData,A as default};

import{_ as e,c as s,o as a,d as o}from"./app.d4fde686.js";const n="/toolbox/main/assets/ubik.352afb8c.svg",y=JSON.parse('{"title":"@hackbg/ubik","description":"","frontmatter":{},"headers":[{"level":2,"title":"Setup","slug":"setup"},{"level":2,"title":"Usage","slug":"usage"},{"level":2,"title":"Features","slug":"features"},{"level":2,"title":"TODO","slug":"todo"}],"relativePath":"ubik/README.md"}'),t={name:"ubik/README.md"},l=o('<div style="text-align:center;"><h1 id="hackbg-ubik" tabindex="-1">@hackbg/ubik <a class="header-anchor" href="#hackbg-ubik" aria-hidden="true">#</a></h1><p><img src="'+n+`" alt=""></p><p>Opinionated shim for publishing isomorphic TypeScript libraries to NPM, in response to the current multilevel fragmentation of the JS packaging landscape.</p><p>When used in combination with the <a href="https://github.com/hackbg/ganesha" target="_blank" rel="noreferrer"><strong>Ganesha</strong></a> module loader, the aim is to make usage of TypeScript completely transparent (no build step during development, monolithic publish step).</p></div><hr><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-hidden="true">#</a></h2><ul><li>Add to your <code>package.json</code>:</li></ul><div class="language-json"><button class="copy"></button><span class="lang">json</span><pre><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">devDependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">@hackbg/ubik</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">latest</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">ubik</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ubik</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h2><ol><li>Edit package, increment version in package.json, commit</li><li>Test if your package can be released: <code>pnpm ubik dry</code></li><li>Release into the wild: <code>pnpm ubik wet</code></li></ol><p>If publishing to tarball, use <code>pnpm ubik fix</code> in your CI.</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-hidden="true">#</a></h2><ul><li><p><strong>Does not remove sources</strong> from distribution.</p></li><li><p><strong>Does not compact all compiled code</strong> into a single file.</p></li><li><p><strong>Compiles TypeScript</strong> to both CommonJS and ESM targets.</p><ul><li>Does not put the compilation output in a subdir.</li><li>Intelligently decides whether <code>.dist.js</code> will contain CJS or ESM, depending on <code>type</code> in <code>package.json</code>, and uses <code>.cjs</code> or <code>.mjs</code> for the other version.</li><li>Patches extensions to make the ESM build work in Node 16+.</li></ul></li><li><p><strong>Publishes to NPM</strong>.</p><ul><li>Modifies <code>package.json</code> during publication to point to the correct compile output for each mode.</li><li>Backs up the original in <code>package.json.real</code> and restores it after publishing the package.</li></ul></li><li><p><strong>Adds a Git tag</strong> in the format <code>npm/$PACKAGE/$VERSION</code> and pushes it.</p></li></ul><h2 id="todo" tabindex="-1">TODO <a class="header-anchor" href="#todo" aria-hidden="true">#</a></h2><ul><li><p>More robust error recovery.</p></li><li><p>Automate semver.</p></li><li><p>Extensibility hooks.</p></li></ul><div align="center"><hr><p>Made with <strong>#%&amp;!</strong> @ <a href="https://foss.hack.bg" target="_blank" rel="noreferrer"><strong>Hack.bg</strong></a> in response to the Node16/TS4 incompatibility event of Q2 2022.</p></div>`,13),p=[l];function i(r,c,d,u,h,g){return a(),s("div",null,p)}const b=e(t,[["render",i]]);export{y as __pageData,b as default};
